-# Enable gon to work, so that ENV variables can be passed to js
= include_gon

%body{:onload => "styleselect()"}

-# Enable gon to work, so that ENV variables can be passed to js
= include_gon

-# %input{:type => "number", :type => "text", :id => "filter_input", :placeholder => "Search Area to Filter", :class => "form-control mb-2"}
-# = button_tag 'Search', class: 'btn btn-success btn-block', id: "applyFilter"


%script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"}

%div#lad_option{ :style => "position: absolute; margin: auto;padding: 10px; top:250px;left: 80px;" }

    .card{:style => "width: 18rem;"}
        .card-body
            %h1 Heatmap
            %h5 Selected Local Authority: #{@lad_name}
            %h5 Code: #{@lad20_code}
            %br
            %h4 Heatmap View:
            %select#globalstyleselect{:onchange => "styleselect()", :class => "form-select w-100%"}
                - if @map_style == "1"
                    %option{:value => "1", :selected => "selected"} Heatmap
                    %option{:value => "2"} Density map
                - elsif @map_style == "2"
                    %option{:value => "1"} Heatmap
                    %option{:value => "2", :selected => "selected"} Density map
            %br
            -# Button to Previous step
            = back_link
  
%head
%title Basic Embed
%script{:src => "https://public.tableau.com/javascripts/api/tableau-2.min.js", :type => "text/javascript"}
:javascript

    function openNav(name,code,lat,lng,population,rest_cat_value, sum_rest_num, curr_rest_num, featured_norm_val) {
        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        // Current type restaurant number in area
        console.log("Number of selected type restaurant in LSOA:" + curr_rest_num);
        console.log("Number of all restaurant in LSOA:" + sum_rest_num);
        
        console.log("RestCatVal:" + rest_cat_value)
        console.log("RestCatVal (int):" + parseInt(rest_cat_value))

        var price_seg_val = window.price_seg_val;
        var loc_strategy = window.loc_strategy;

        console.log(rest_cat_val);
        console.log(price_seg_val);
        console.log(loc_strategy);

        restaurant_Category_Encode = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"]

        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        src = ' src="https://www.google.com/maps/embed/v1/view?key='+gon.google_api_key+'&center=' + lat + ',' + lng + '&zoom=15">'
        // Let LSOA default map to show be identical to previous map if next stage
        var map_style = $('#globalstyleselect').val();
        console.log(src);
        console.log("Token: " + gon.form_token);
        console.log("Map style: " + map_style);
        
        innerHtml = '<head><style>' +
        // Header part
        ".holder .card{position: absolute;top: 10px;left: 10px;width: 100%;}" +
        '.holder #select_area{position: absolute;bottom: 60px; left: 30%;}'+
        '</style></head>' +
        '<body>' + 
        // Close Button
        '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
        // Google map frame
        '<div class="holder"><iframe id="map_frame"' +
        ' width="500"' +
        ' height="705"' +
        ' style="border:0"' +
        ' loading="lazy"' +
        ' allowfullscreen' +
        src +
        '</iframe>' +
        // Button to select a location, post params of location to controller
        '<form class="button_to" method="post" action="/rest_cluster?name='+name+'&code='+ code + '&rest_cat='+ parseInt(rest_cat_value) +'&lad_name='+ gon.lad_name +
        '&price_seg_val='+price_seg_val+'&loc_strategy='+loc_strategy+'">'+
        '<input class="btn btn-success" id="select_area" type="submit" value="Select ' + name + '" />' +
        '<input type="hidden" name="authenticity_token" value="' + gon.form_token + '" />' +       
        '</form>' +
        // Card to display information about district
        '<div class="card" style="width: 20rem;">' +
        '<div class="card-body">' +
        '<h5 class="card-title">'+ name +'</h5><h6>Features: </h6>';
        //
        for(let i = 0; i<featured_norm_val.length;i++){
            innerHtml += '<span class="badge bg-success">'+ featured_norm_val[i][1] +'</span>&nbsp;';
        }

        innerHtml += '<h6 class="card-subtitle mb-2 text-muted"><br>Population: '+ population +'</h6>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="total"> '+ sum_rest_num +' listed restaurants in ' + name + ' </h6>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="dir_compt"> '+ curr_rest_num +' Direct Competitors (' + restaurant_Category_Encode[parseInt(rest_cat_value)] + ') </h6>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="indir_compt"> '+ (sum_rest_num - curr_rest_num) +' Indirect Competitors </h6>' +
        
        '<br><form class="button_to" method="post" action="/nearby_result?lat='+lat+'&lng='+lng+'&map=LSOA">' + 
        '<input class="btn btn-primary" id="nearby_search" type="submit" value="Feature Locations nearby" />' +
        '<input type="hidden" name="authenticity_token" value="' + gon.form_token + '" />' + 
        '</form></div></div></div></body>'


        document.getElementById("mySidebar").innerHTML=innerHtml;
        document.getElementById("mySidebar").style.width = "500px";
        
        console.log("Finished loading")
        
    }

    function openNav_Restaurant(place_id,rest_cat, lad_name) {
        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        // Current type restaurant number in area
        console.log("openNav_Restaurant function selected")
        console.log("Place ID:" + place_id)
        console.log("Rest_Cat:" + rest_cat)

        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        src = ' src = "https://www.google.com/maps/embed/v1/place?key='+gon.google_api_key+'&q=place_id:'+ place_id +'">'
        
        // Let LSOA default map to show be identical to previous map if next stage
        var map_style = $('#globalstyleselect').val();
        console.log(src);
        console.log("Restaurant Token: " + gon.form_token);
        console.log("Map style: " + map_style);
        
        innerHtml = '<head><style>' +
        // Header part
        "'.holder #select_restaurant{position: absolute;bottom: 60px; left: 30%;}'" +
        '</style></head>' +
        '<body>' + 
        // Close Button
        '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
        // Google map frame
        '<div class="holder"><iframe id="map_frame"' +
        ' width="500"' +
        ' height="800"' +
        ' style="border:0"' +
        ' loading="lazy"' +
        ' allowfullscreen' +
        src +
        '</iframe>' +
        // Card to display information about district
        '<input class="btn btn-success" id="select_area" type="submit" value="More about restaurant" />' +
        '</body>'


        document.getElementById("mySidebar").innerHTML=innerHtml;
        document.getElementById("mySidebar").style.width = "500px";
        
        console.log("Finished loading")
        
    }


    function closeNav() {
        document.getElementById("mySidebar").style.width = "0";
    }

    let viz
    //function for viz
    function initViz(containerDiv, url, options) {
        if (viz){
            viz.dispose();
        }
        viz = new tableau.Viz(containerDiv, url, options);
    }


    // Option to show sheet 1
    function applyOptions1() {
        console.log("Running option 1, LAD20Cd is: " + gon.lad20_code)
        var containerDiv = document.getElementById("vizContainer"),
            url = "https://public.tableau.com/views/LSOA_Recommendation_Value/LSOA_Heatmap?:language=en-GB&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                "Lad20Cd" : gon.lad20_code,
                width: window.innerWidth,
                height: window.innerHeight,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                    
                }
            };

    initViz(containerDiv, url, options);
    }

    // Option to show sheet 2
        function applyOptions2() {
            console.log("Running option 2, LAD20Cd is: " + gon.lad20_code)
            var containerDiv = document.getElementById("vizContainer"),
            url = "https://public.tableau.com/views/LSOA_Recommendation_Value/LSOA_Density_Map?:language=en-GB&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                "Lad20Cd" : gon.lad20_code,
                width: window.innerWidth,
                height: window.innerHeight,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                }
            };

    initViz(containerDiv, url, options);
    }

    // Function to listen to adjustment of window
    window.addEventListener("resize", () => {
        console.log(
            `Resizing the window ${window.innerHeight}, ${window.innerWidth}`
        );
        autoResize();
    });

    // Resize dashboard window
    function autoResize(){
        const height = window.innerHeight;
        const width = window.innerWidth;
        viz.setFrameSize(width, height);
    }

    document.getElementById('applyFilter').addEventListener('click',function(){
        applyFilter();
    })

    function styleselect() {
        var lad_option = document.getElementById("lad_option");
        lad_option.style.display = "none";

        var value = $('#globalstyleselect').val();
        var div = $("#stylediv");
        if (value == "1") {
            applyOptions1();
        }
        if (value == "2") {
            applyOptions2();
        }
    }

    function update_weight_to_tableau(){
        console.log("Updating weights");
        weight_arr = gon.weight_arr;
        rest_cat = gon.rest_cat;
        //[Asian_weight, Black_weight, White_weight, Mixed_weight, Others_weight, Same_cat_restaurant_weight,
        //    Diff_cat_restaurant_weight, Rent_acceptance_min, Rent_acceptance_max]
        console.log(weight_arr);

        // Population density weight decrease, not that important as LSOA because when area is smaller between
        // More fluidity
        var Population_density_weights = 10;
        // LSOA weights
        var Chinese_weights = 0.67;
        var Indian_weights = 0.67;
        var Asian_mixed_weights = 0.67;
        // Chinese and Indian each worty 1/6 of total 4 points in the Asian ethnicity as a whole
        var Asian_Pak_Bang_Others = 2.4;
        var Black_weights = 4;
        var White_weights = 4;

        // 4 individual mix category in total, Asian_mix weight * 4 = 2.68
        var Mixed_without_Asian_weights = 2.68;
        var Other_race_weights = 4;

        // if rest_cat is Chinese or Indian, then independent weights for these two ethnics would be increasing higher
        // If Indian restaurant
        if(rest_cat == 1){
            // weights increase for area of high Indian ethnnicity and mixed community

            Indian_weights *= 3;
            Asian_mixed_weights += 0.67;

            console.log("Indian Mixed weights: " + Indian_weights);
            console.log("Asian Mixed weights: " + Asian_mixed_weights);
        }else if (rest_cat == 5){
            // weights increase for area of high Indian ethnnicity and mixed community
            Chinese_weights *= 3;
            Asian_mixed_weights += 0.67;

            console.log("Chinese weights: " + Chinese_weights);
            console.log("Asian Mixed weights: " + Asian_mixed_weights);
        } else {
            // for other ethnicity restaurants

            // Chinese and Indian weights would increase by originally (Asian += 0.5) to be allocated to 6 specific ethnicities, so each add 0.083
            Chinese_weights += (weight_arr[0])/6;
            Indian_weights += (weight_arr[0])/6;
            Asian_Pak_Bang_Others += ((weight_arr[0])/6) * 3;

            Asian_mixed_weights += (weight_arr[3])/4;

            Black_weights = weight_arr[1];
            White_weights = weight_arr[2];
            Mixed_without_Asian_weights = ((weight_arr[3])/4) * 3;
            Other_race_weights = weight_arr[4];
        }

        Same_cat_restaurant_weights = weight_arr[5];
        Diff_cat_restaurant_weights = weight_arr[6];
        Rent_acceptance_min = weight_arr[7];
        Rent_acceptance_max = weight_arr[8];
        rest_cat_val = weight_arr[9];
        price_seg_val = weight_arr[10];
        rest_cat = rest_cat_val;
        rent_weight = 18;
        house_price_weight = 8;
        income_weight = 13;


        // augment each restaurant category depending on agglomeration or diffusion as its the main factor
        if(Same_cat_restaurant_weights>Diff_cat_restaurant_weights){
            Same_cat_restaurant_weights = Same_cat_restaurant_weights + 10;
        } else {
            Diff_cat_restaurant_weights = Diff_cat_restaurant_weights + 10;
        }

        // influence of price segment on area with (no data about all restaurant price because too expensive) but income, rent and house price can be referenced.

        // if price segment low
        if(price_seg_val == 0){
            // income factor would drastically decrease (val designated to be larger better), rent and house price highly increase (val designated to be less better)
            income_weight /= 4;
            rent_weight *= 10;
            house_price_weight *= 10;
        }else if(price_seg_val == 1){
            // income factor would somehow decrease (val designated to be larger better), rent and house price increase a bit (val designated to be less better)
            income_weight /= 2;
            rent_weight *= 10;
            house_price_weight *= 10;
        }else if(price_seg_val == 1){
            // income factor would increase (val designated to be larger better), rent and house price decrease (val designated to be less better)
            income_weight *= 2;
            rent_weight /= 10;
            house_price_weight /= 10;
        }else {
            // income factor would drastically increase (val designated to be larger better), rent and house price drastically decrease (val designated to be less better)
            income_weight *= 4;
            rent_weight /= 10;
            house_price_weight /= 10;
        }

        console.log(Black_weights);
        console.log(White_weights);
        console.log(Mixed_without_Asian_weights);
        console.log(Other_race_weights);
        console.log(Same_cat_restaurant_weights);
        console.log(Diff_cat_restaurant_weights);
        console.log(Rent_acceptance_min);
        console.log(Rent_acceptance_max);
        console.log(income_weight);
        console.log(rent_weight);
        console.log(house_price_weight);

        workbook.changeParameterValueAsync("Asian_Chinese_weight", Chinese_weights);
        workbook.changeParameterValueAsync("Asian_Indian_weight", Indian_weights);
        workbook.changeParameterValueAsync("Asian_Pak_Bang_Mixed_Other_weight", Asian_Pak_Bang_Others);
        workbook.changeParameterValueAsync("Mixed_White_Asian_weight", Asian_mixed_weights);
        workbook.changeParameterValueAsync("Black_weight", Black_weights);
        workbook.changeParameterValueAsync("White_weight", White_weights);
        workbook.changeParameterValueAsync("Mixed_without_Asian_weight", Mixed_without_Asian_weights);
        workbook.changeParameterValueAsync("Other_Race_weight", Other_race_weights);
        workbook.changeParameterValueAsync("Same_Cat_Restaurant_weight", Same_cat_restaurant_weights);
        workbook.changeParameterValueAsync("Diff_Cat_Restaurant_weight", Diff_cat_restaurant_weights);
        workbook.changeParameterValueAsync("Rent_acceptance_min", Rent_acceptance_min);
        workbook.changeParameterValueAsync("Rent_acceptance_min", Rent_acceptance_min);
        workbook.changeParameterValueAsync("Weight_Population", Population_density_weights);
        workbook.changeParameterValueAsync("rest_cat", rest_cat);
        workbook.changeParameterValueAsync("Income_weight", income_weight);
        workbook.changeParameterValueAsync("Rent_weight", rent_weight);
        workbook.changeParameterValueAsync("House_price_weight", house_price_weight);
        console.log("Finished Adjusting weights");

        // Pass restaurant category and price segment to compare price with cluster restaurants
        // Also pass agglomeration or diffusion through the change of weight
        if(Same_cat_restaurant_weights > Diff_cat_restaurant_weights){
            // Agglomeration
            loc_strategy = "Agglomerate";
        } else {
            loc_strategy = "Diffusion";
        }

        window.price_seg_val = price_seg_val;
        window.loc_strategy = loc_strategy;
        //cluster_data = [rest_cat_val, price_seg_val, loc_strategy]
        
    }

    function listenToMarksSelection() {

        // upload weights to tableau from lad
        //-------------------
        workbook = viz.getWorkbook();
        update_weight_to_tableau();
        

        // Display option block everytime map is loaded
        var lad_option = document.getElementById("lad_option");
        lad_option.style.display = "block";

        console.log("listenToMarksSelection function is loaded");
        viz.addEventListener(tableau.TableauEventName.MARKS_SELECTION, onMarksSelection);
    }

    function onMarksSelection(marksEvent) {
        console.log("onMarksSelection function is loaded");
        
        return marksEvent.getMarksAsync().then(reportSelectedMarks);
    }

    function reportSelectedMarks(marks) {
        console.log("reportSelectedMarks is loaded");
        var html = "";

        for (var markIndex = 0; markIndex < marks.length; markIndex++) {
            var pairs = marks[markIndex].getPairs();
            html += "Mark " + markIndex + ": ";
            var array = [];
             var dict = {};
            for (var pairIndex = 0; pairIndex < pairs.length; pairIndex++) {
                var pair = pairs[pairIndex];
                html += "Field Name: " + pair.fieldName;
                html += ", Value:" + pair.formattedValue + "\n";
                 dict[pair.fieldName] = pair.formattedValue;
                array.push(pair.formattedValue)
            }
            console.log(html);
            html += "";

            // Print field name and value of all retreived data for field
            for(var key in dict) {
                console.log(key + " : " + dict[key]);
            }
        }
        console.log("Length:" + marks.length);

        var name = dict["ATTR(Lsoa11Nm)"];
        var code = dict["LSOA11 Code"];
        var lad_name = dict["LAD20 Name"];
        var lad_code = dict["LAD20 Cd"];
        var lat = dict["AVG(LAT)"];
        var lng = dict["AVG(Long)"];
        var population = dict["ATTR(Sum Population)"];
        var postcode = dict["Postcode"];
        var sum_rest_num = dict["AGG(Number of Restaurants in LSOA)"];

        restaurant_Category_Encode = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"]

        var rest_cat_value = gon.rest_cat
        console.log("Selected rest_cat from previous stage:" + rest_cat_value);

        // Index corresponding to the restaurant category order on Tableau Marks
        rest_cat_index = ["AGG(Number of Italian Restaurants in LSOA)",
        "AGG(Number of Indian Restaurants in LSOA)", "AGG(Number of Japanese Restaurants in LSOA)",
        "AGG(Number of Thai Restaurants in LSOA)", "AGG(Number of British Restaurants in LSOA)",
        "AGG(Number of Chinese Restaurants in LSOA)", "AGG(Number of Vegetarian Restaurants in LSOA)",
        "AGG(Number of Pub(s) in LSOA)", "AGG(Number of Cafe(s) in LSOA)"]

        // Sum of current restaurant category in LSOA
        var curr_rest_num = dict[rest_cat_index[rest_cat_value]];
        var sum_rest_num = dict["AGG(Number of Restaurants in LSOA)"];
        console.log("Curr_rest_num: " + curr_rest_num);
        // Inspect each restaurant count
        for (let i = 0; i < rest_cat_index.length; i++) {
            console.log(restaurant_Category_Encode[i]);
        }

        // Restaurant normalized value to discover the advantage or disadvantage of an area.
        // normalized value can show a measure's performance / score compared to all other areas
        // Each var will have the val and name of the parameter
        var pop_dense_norm = [dict["AGG(Population_Density_normalized)"], "Population Density"];
        var income_norm = [dict["AGG(Household_Income_normalized)"], "Household Income"];
        var house_price_norm = [dict["AGG(Median_House_Price_normalized)"], "House Price"];
        var weekly_rent_norm = [dict["AGG(Rent_normalized)"], "Weekly Rent"];
        var Chinese_percentage_normalized = [dict["AGG(Asian_Chinese_%_normalized)"], "Chinese Percentage"];
        var Indian_percentage_normalized = [dict["AGG(Asian_Indian_%_normalized)"], "Indian Percentage"];
        var Mixed_Asian_percentage_normalized = [dict["AGG(Asian_Pak_Bang_Other_%_normalized)"], "Asian Percentage (w/o Indian, Chinese)"];
        var Other_Asian_percentage_normalized = [dict["AGG(Mixed_White_Asian_normalized)"], "Mixed Asian Percentage"];
        var Black_percentage_normalized = [dict["AGG(Black_%_normalized)"], "Black Percentage"];
        var White_percentage_normalized = [dict["AGG(White_%_normalized)"], "White Percentage"];
        var Mixed_percentage_normalized = [dict["AGG(Mixed_%_normalized)"], "Mixed Percentage (w/o Mixed Asian)"];
        var Other_percentage_normalized = [dict["AGG(Other_%_normalized)"], "Other Ethnicity Percentage"];
        var same_cat_normalized = [dict["AGG(Same_cat_normalized)"], "Amount of same category restaurants"];
        var diff_cat_normalized = [dict["AGG(Diff_cat_normalized)"], "Amount of different category restaurants"];

        // loopable array for normalization
        var normalized_arr = [pop_dense_norm, income_norm, house_price_norm, weekly_rent_norm, Chinese_percentage_normalized,Indian_percentage_normalized,
        Mixed_Asian_percentage_normalized, Other_Asian_percentage_normalized, Black_percentage_normalized,
        White_percentage_normalized, Mixed_percentage_normalized, Other_percentage_normalized, same_cat_normalized, diff_cat_normalized];

        // add these normalized value if they have featureable values
        var featured_norm_val = [];

        for(let i = 0; i<normalized_arr.length;i++){
            // values other than house price and rent price, the higher the better
            if(normalized_arr[i][0]>0.8 && normalized_arr[i][1] != "House Price" && normalized_arr[i][1] != "Weekly Rent"){
                featured_norm_val.push(normalized_arr[i]);
                console.log("Values larger than 0.8 among all areas");
                console.log(normalized_arr[i][1]);
            }

            // house price and rent price, the lower the better
            if(normalized_arr[i][1] == "House Price" || normalized_arr[i][1] == "Weekly Rent"){
                if(normalized_arr[i][0] <= 0.2){
                    featured_norm_val.push(normalized_arr[i]);
                    console.log("House price or rent values less than 0.2 among all areas");
                    console.log(normalized_arr[i][1]);
                }

            }
        }
        
        var rest_place_id = dict["Place ID (Restaurant Location Output.csv1)"];
        var rest_cat = dict["Restaurant Category (Restaurant Location Output.csv1)"];
        console.log("Place ID:" + rest_place_id);
        console.log("Restaurant Category:" + rest_cat);
        // only Google API when one mark is selected
        if (marks.length == 1){
            // If selected a restaurant
            if ((rest_place_id != null)){
                console.log("Restaurant Selected");
                openNav_Restaurant(rest_place_id,rest_cat, gon.lad_name);
                console.log("Sent to openNav");
            }else{
                console.log("LSOA Selected");
                openNav(name,code,lat,lng,population,rest_cat_value, sum_rest_num, curr_rest_num,featured_norm_val);
                console.log("Sent to openNav");
            }
        }
    }

%body#stylediv

-# Side panel for google maps
#mySidebar.sidebar

