-# Enable gon to work, so that ENV variables can be passed to js
= include_gon

%body{:onload => "applyOptions()"}

-# Enable gon to work, so that ENV variables can be passed to js

= include_gon

.title{:style => "margin-top: 10px; margin-left: 10px;"}
    = back_link
    %h1{:style => "color: white;"} Restaurants in Cluster #{@cluster_id}
    %h5{:style => "color: white;"} Selected Local Authority: #{@lad_name}
    %h5{:style => "color: white;"} Code: #{@lsoa11_code}

-# %input{:type => "number", :type => "text", :id => "filter_input", :placeholder => "Search Area to Filter", :class => "form-control mb-2"}
-# = button_tag 'Search', class: 'btn btn-success btn-block', id: "applyFilter"


%script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"}
  
%head
%title Basic Embed
%script{:src => "https://public.tableau.com/javascripts/api/tableau-2.min.js", :type => "text/javascript"}
:javascript

    function openNav(name,code,lat,lng,population,rest_cat_value, sum_rest_num, curr_rest_num) {
        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        // Current type restaurant number in area
        console.log("Number of selected type restaurant in LSOA:" + curr_rest_num);
        console.log("Number of all restaurant in LSOA:" + sum_rest_num);
        
        console.log("RestCatVal:" + rest_cat_value)
        console.log("RestCatVal (int):" + parseInt(rest_cat_value))

        restaurant_Category_Encode = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"]

        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        src = ' src="https://www.google.com/maps/embed/v1/view?key='+gon.google_api_key+'&center=' + lat + ',' + lng + '&zoom=15">'
        // Let LSOA default map to show be identical to previous map if next stage
        console.log(src);
        console.log("Token: " + gon.form_token);
        console.log("Map style: " + map_style);
        
        innerHtml = '<head><style>' +
        // Header part
        ".holder .card{position: absolute;top: 10px;left: 10px;width: 100%;} " +
        '.holder #select_area{position: absolute;bottom: 60px; left: 30%;}'+
        '</style></head>' +
        '<body>' + 
        // Close Button
        '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
        // Google map frame
        '<div class="holder"><iframe id="map_frame"' +
        ' width="450"' +
        ' height="800"' +
        ' style="border:0"' +
        ' loading="lazy"' +
        ' allowfullscreen' +
        src +
        '</iframe>' +
        // Button to select a location, post params of location to controller
        '<form class="button_to" method="post" action="/rest_cluster?name='+name+'&code='+ code + '&rest_cat='+ parseInt(rest_cat_value) +'&lad_name='+ gon.lad_name +'">'+
        '<input class="btn btn-success" id="select_area" type="submit" value="Select ' + name + '" />' +
        '<input type="hidden" name="authenticity_token" value="' + gon.form_token + '" />' +       
        '</form>' +
        // Card to display information about district
        '<div class="card" style="width: 18rem;">' +
        '<div class="card-body">' +
        '<h5 class="card-title">'+ name +'</h5>' +
        '<h6 class="card-subtitle mb-2 text-muted">('+ lat + ', ' + lng + ')</h6>' +
        '<h6 class="card-subtitle mb-2 text-muted">Population: '+ population +'</h6>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="total"> '+ sum_rest_num +' listed restaurants in ' + name + ' </p>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="dir_compt"> '+ curr_rest_num +' Direct Competitors (' + restaurant_Category_Encode[parseInt(rest_cat_value)] + ') </p>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="indir_compt"> '+ (sum_rest_num - curr_rest_num) +' Indirect Competitors </p>' +
        
        '</div></div></div></body>'


        document.getElementById("mySidebar").innerHTML=innerHtml;
        document.getElementById("mySidebar").style.width = "450px";
        
        console.log("Finished loading")
        
    }

    function openNav_Restaurant(place_id,rest_cat, lad_name, lat, long) {
        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        // Current type restaurant number in area
        console.log("openNav_Restaurant function selected")
        console.log("Place ID:" + place_id)
        console.log("Rest_Cat:" + rest_cat)

        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        src = ' src = "https://www.google.com/maps/embed/v1/place?key='+gon.google_api_key+'&q=place_id:'+ place_id +'">'
        
        // Let LSOA default map to show be identical to previous map if next stage

        console.log(src);
        console.log("Restaurant Token: " + gon.form_token);
        
        innerHtml = '<head><style>' +
        // Header part
        "'.holder #select_restaurant{position: absolute;bottom: 60px; left: 30%;}'" +
        '</style></head>' +
        '<body>' + 
        // Close Button
        '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
        // Google map frame
        '<div class="holder"><iframe id="map_frame"' +
        ' width="450"' +
        ' height="800"' +
        ' style="border:0"' +
        ' loading="lazy"' +
        ' allowfullscreen' +
        src +
        '</iframe>' +
        // Card to display information about district
        '<input class="btn btn-success" id="select_area" type="submit" value="More about restaurant" />' +
        '</body>'


        document.getElementById("mySidebar").innerHTML=innerHtml;
        document.getElementById("mySidebar").style.width = "450px";
        
        console.log("Finished loading")
        
    }

    // update selected weights to tableau
    function update_weight_to_tableau(){
        console.log("Updating weights: restaurant category - " + parseInt(gon.rest_cat));
        console.log("Updating weights: loc_strategy - " + gon.loc_strategy);

        workbook.changeParameterValueAsync("Rest_Cat", gon.rest_cat);
        workbook.changeParameterValueAsync("loc_strategy", gon.loc_strategy);
        console.log("Finished Adjusting weights");

    }


    function closeNav() {
        document.getElementById("mySidebar").style.width = "0";
    }

    let viz
    //function for viz
    function initViz(containerDiv, url, options) {
        if (viz){
            viz.dispose();
        }
        viz = new tableau.Viz(containerDiv, url, options);
    }

    function applyOptions() {

            for(var place_id in gon.place_id_arr) {
                console.log(gon.place_id_arr[place_id]);
            } 

            console.log("Clusters: " + ("Cluster " + gon.cluster_id));
            var containerDiv = document.getElementById("vizContainer"),
            url = "https://public.tableau.com/views/LSOA_Recommendation_Value/Cluster_Group?:language=en-GB&publish=yes&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                "LSOA11 Code" : gon.lsoa11_code,
                "Place ID (Restaurant Location Output.csv1)" : gon.place_id_arr,
                width: window.innerWidth,
                height: window.innerHeight,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                }
            };

    initViz(containerDiv, url, options);
    }

    // Function to listen to adjustment of window
    window.addEventListener("resize", () => {
        console.log(
            `Resizing the window ${window.innerHeight}, ${window.innerWidth}`
        );
        autoResize();
    });

    // Resize dashboard window
    function autoResize(){
        const height = window.innerHeight;
        const width = window.innerWidth;
        viz.setFrameSize(width, height);
    }

    document.getElementById('applyFilter').addEventListener('click',function(){
        applyFilter();
    })

    function listenToMarksSelection() {
        console.log("listenToMarksSelection function is loaded");
        workbook = viz.getWorkbook();
        update_weight_to_tableau();
        viz.addEventListener(tableau.TableauEventName.MARKS_SELECTION, onMarksSelection);
    }

    function onMarksSelection(marksEvent) {
        console.log("onMarksSelection function is loaded");
        
        return marksEvent.getMarksAsync().then(reportSelectedMarks);
    }

    function reportSelectedMarks(marks) {
        console.log("reportSelectedMarks is loaded");
        var html = "";

        for (var markIndex = 0; markIndex < marks.length; markIndex++) {
            var pairs = marks[markIndex].getPairs();
            html += "Mark " + markIndex + ": ";
            var array = [];
             var dict = {};
            for (var pairIndex = 0; pairIndex < pairs.length; pairIndex++) {
                var pair = pairs[pairIndex];
                html += "Field Name: " + pair.fieldName;
                html += ", Value:" + pair.formattedValue + "\n";
                 dict[pair.fieldName] = pair.formattedValue;
                array.push(pair.formattedValue)
            }
            console.log(html);
            html += "";

            // Print field name and value of all retreived data for field
            for(var key in dict) {
                console.log(key + " : " + dict[key]);
            }
        }

        var rest_place_id = dict["Place ID (Restaurant Location Output.csv1)"];
        var rest_cat = dict["Restaurant Category (Restaurant Location Output.csv1)"];
        var lat = dict["Latitude (generated)"];
        var long = dict["Longitude (generated)"];

        console.log("Length:" + marks.length);

        // only Google API when one mark is selected
        if (marks.length == 1){
            // If selected a restaurant
            console.log("Place ID:" + rest_place_id + ", Category: " + rest_cat);
            openNav_Restaurant(rest_place_id,rest_cat, gon.lad_name, lat, long);
            console.log("Sent to openNav");
        }
    }

    
    

%body#stylediv

-# Side panel for google maps
#mySidebar.sidebar

