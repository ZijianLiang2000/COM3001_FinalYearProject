-# Enable gon to work, so that ENV variables can be passed to js
= include_gon

Restaurant Clusters


%head
%title Cluster
%script{:src => "https://public.tableau.com/javascripts/api/tableau-2.min.js", :type => "text/javascript"}

:javascript

    let viz
    var sheet, table;

    //function for viz
    function initViz(containerDiv, url, options) {
        console.log("Initializing Viz");
        if (viz){
            viz.dispose();
        }
        viz = new tableau.Viz(containerDiv, url, options);
    }

    // load function applyOptions when webpage loaded
    window.onload = function() {
        applyOptions();
    };

    // Option to show sheet cluster
    function applyOptions() {
        console.log("Initializing...");
        var containerDiv = document.getElementById("vizContainer"),
            url = "https://public.tableau.com/views/LSOA_Recommendation_Value/Restaurant_Cluster?:language=en-GB&publish=yes&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                "LSOA11 Code" : gon.lsoa11_code,
                width: window.innerWidth,
                height: window.innerHeight,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    workbook = viz.getWorkbook();
                    getUnderlyingData();
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                    
                }
            };

    initViz(containerDiv, url, options);
    }

    function getUnderlyingData(){
    console.log("Worksheets:" + workbook.getActiveSheet());
    sheet = workbook.getActiveSheet();
    // If the active sheet is not a dashboard, then you can just enter:
    // viz.getWorkbook().getActiveSheet();
    options = {
        maxRows: 0, // Max rows to return. Use 0 to return all rows
        ignoreAliases: false,
        ignoreSelection: true,
        includeAllColumns: false
    };

    sheet.getSummaryDataAsync(options).then(function(t){
        console.log("Retreiving Underlying data");
        table = t;
        var tgt = document.getElementById("dataTarget");
        console.log(JSON.stringify(table))
        console.log("written JSON")
        //console.log("Underlying Data:" + JSON.stringify(table.getData()) + "</p>");
        });
    }   

        // Function to listen to adjustment of window
    window.addEventListener("resize", () => {
        console.log(
            `Resizing the window ${window.innerHeight}, ${window.innerWidth}`
        );
        autoResize();
    });

    // Resize dashboard window
    function autoResize(){
        const height = window.innerHeight;
        const width = window.innerWidth;
        viz.setFrameSize(width, height);
    }

    function listenToMarksSelection() {
        var rest_cat_value = String(gon.rest_cat);
        console.log("Rest cat val:" + rest_cat_value);
        
        workbook.changeParameterValueAsync("Rest_Cat", rest_cat_value);
        console.log("listenToMarksSelection function is loaded");
        

        viz.addEventListener(tableau.TableauEventName.MARKS_SELECTION, onMarksSelection);
    }

    function onMarksSelection(marksEvent) {
        console.log("onMarksSelection function is loaded");
        return marksEvent.getMarksAsync().then(reportSelectedMarks);
    }

    function reportSelectedMarks(marks) {
        console.log(marks)
        console.log("reportSelectedMarks is loaded");
        var html = "";

        for (var markIndex = 0; markIndex < marks.length; markIndex++) {
            var pairs = marks[markIndex].getPairs();
            html += "Mark " + markIndex + ": ";
            var array = [];
            var dict = {};
            for (var pairIndex = 0; pairIndex < pairs.length; pairIndex++) {
                var pair = pairs[pairIndex];
                html += "Field Name: " + pair.fieldName;
                html += ", Value:" + pair.formattedValue + ", ";
                dict[pair.fieldName] = pair.formattedValue;;
                array.push(pair.formattedValue)
            }
            html += "";
            
            for(var key in dict) {
            console.log(key + " : " + dict[key]);
            }
        }
        console.log("Length:" + marks.length);

        // only Google API when one mark is selected
        if (marks.length == 1){
            console.log("Lat:" + lat + ",lng: " + lng);
            openNav(name,code,postcode,population,rest_cat_value, sum_rest_num, curr_rest_num);
            console.log("Sent to openNav");
        }
    }

%body#stylediv

