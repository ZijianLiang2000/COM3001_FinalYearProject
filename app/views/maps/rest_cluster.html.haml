-# Enable gon to work, so that ENV variables can be passed to js
= include_gon



%head
%title Cluster

%script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"}

%script{:src => "https://public.tableau.com/javascripts/api/tableau-2.min.js", :type => "text/javascript"}
%div#lad_option{ :style => "margin: auto; top: 140px; left: 50px; position: absolute" }
    .card{:style => "width: 25rem;"}
        .card-body
            %h5 Data View
            %select#dataview{:onchange => "dataview()", :class => "form-select w-100%"}
                %option{:selected => "selected", :value => "none"} Map
                %option{:value => "1"} Cluster Restaurant Category Structure

:javascript

    let viz
    var sheet, table;

    // Function for onchange dataview
    function dataview() {
        var value = $('#dataview').val();
        var cluster_card = document.getElementById("cluster_card");
        cluster_card.style.display = "none";
        // if dataview is selected as Map
        if (value == "none") {
            console.log("Val is map");
            // apply first option
            applyOptions();
        }
        //var div = $("#stylediv");
        // If map style is Ethnic Structure table
        if (value == "1") {
            // Use data sheet for Ethnic Structure table
            applyDataView1();
            
        }
        // else you datasheet for XXX
        if (value == "2") {
            //applyDataView2();
        }
    }

    //function for viz
    function initViz(containerDiv, url, options) {
        console.log("Initializing Viz");
        if (viz){
            viz.dispose();
        }
        viz = new tableau.Viz(containerDiv, url, options);
    }

    // load function applyOptions when webpage loaded
    window.onload = function() {
        window.lad_name = gon.lad_name;
        applyOptions();
    };
    
    // Option to show data view
    function applyDataView1() {

    var containerDiv = document.getElementById("vizContainer"),
    // url = "https://public.tableau.com/views/Population-LSOAHeatMap/Sheet3?:publish=yes&:display_count=n&:origin=viz_share_link"
    url = "https://public.tableau.com/views/LSOA_Recommendation_Value/Restaurant_Cluster_Structure?:language=en-GB&publish=yes&:display_count=n&:origin=viz_share_link",
    options = {
        "LSOA11 Code" : gon.lsoa11_code,
        // Options to show/filter Restaurant category according to selected type from user
        width: window.innerWidth,
        height: window.innerHeight,
        device: "desktop",
        hideTabs: true,
        onFirstInteractive: function () {
            workbook = viz.getWorkbook();
            console.log("Run this code when the viz has finished loading.");
            listenToMarksSelection();
            getUnderlyingData();
        }
    };
    initViz(containerDiv, url, options);
    }

    function openNav_Restaurant(place_id,rest_cat, lad_name) {
        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        // Current type restaurant number in area
        console.log("openNav_Restaurant function selected")
        console.log("Place ID:" + place_id)
        console.log("Rest_Cat:" + rest_cat)
        console.log("LAD:" + lad_name)
        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        src = ' src = "https://www.google.com/maps/embed/v1/place?key='+gon.google_api_key+'&q=place_id:'+ place_id +'">'

        innerHtml = '<head><style>' +
        // Header part
        "'.holder #select_restaurant{position: absolute;bottom: 60px; left: 30%;}'" +
        '</style></head>' +
        '<body>' + 
        // Close Button
        '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
        // Google map frame
        '<div class="holder"><iframe id="map_frame"' +
        ' width="450"' +
        ' height="800"' +
        ' style="border:0"' +
        ' loading="lazy"' +
        ' allowfullscreen' +
        src +
        '</iframe>' +
        // Card to display information about district
        '<input class="btn btn-success" id="select_cluster" type="submit" value="More about restaurant" />' +
        '</body>'

        document.getElementById("mySidebar").innerHTML=innerHtml;
        document.getElementById("mySidebar").style.width = "450px";
        
        console.log("Finished loading")
        
    }
    // Info for sidebar to display after clicking on specific button
    function clusterInfo(clicked_id){

        // reading which button pressed
        console.log("Selected Cluster " + clicked_id);
        console.log(window.table);

        table = window.table;
        rest_cat = gon.rest_cat;
        lad_name = window.lad_name;

        const info_arr = [];

        // for all restaurants in cluster
        for (let i = 0; i < table["$0"]["$3"].length; i++){
            // if restaurant belongs to selected cluster
            if (parseInt(table["$0"]["$3"][i][0]["value"]) == parseInt(clicked_id)){
                // save restaurant into array
                info_arr.push(table["$0"]["$3"][i]);
            }
        }

        const rest_cat_arr = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"];
        
        var curr_rest_num = 0;
        var sum_rest_num = 0;

        for (let i = 0; i < info_arr.length; i++){
            // select random point's lat and long to display embed background map view
            lat = info_arr[i][4]["value"];
            long = info_arr[i][5]["value"];

            // index (of restaurant in list) of restaurant in cluster
            cluster_rest_cat = info_arr[i][3]["value"];

            console.log("Rest_cat array val: " + rest_cat + ", " + rest_cat_arr[parseInt(rest_cat)]);
            console.log("Actual rest_cat: " + cluster_rest_cat);

            // total numbers of restaurants of any category
            sum_rest_num = sum_rest_num + 1;

            // current type of restaurants amount
            if (rest_cat_arr[parseInt(rest_cat)] == cluster_rest_cat){
                curr_rest_num = curr_rest_num + 1;
            }
            // calculate restaurant category value for competition
            console.log(info_arr[i]);
            console.log("Num of current type restaurant: " + curr_rest_num);

            window.sum_rest_num = sum_rest_num;
            window.curr_rest_num = curr_rest_num;
            
        }

        // find detailed information for places within clusters
        // Use AJAX to call method from controller
        $.ajax({
            type: "POST",
            url: "/get_rest_detail",
            data: {'info_arr': info_arr,  authenticity_token: $('[name="csrf-token"]')[0].content },
            success:function(msg){
                // Returning a json format of count
                info_arr_full = msg.response;
                // To get value of json response, eg do: info_arr_full["0"]["1"]["value"]
                for (let i = 0; i < (info_arr_full).length; i++){
                    console.log("Response: " + info_arr_full[i]["ratings"]);
                }
                
                sum_rest_num = window.sum_rest_num;
                curr_rest_num = window.curr_rest_num;

                lad_name = window.lad_name;
                // sidebar view if successfully return data
                // sidebar part
                src = ' src="https://www.google.com/maps/embed/v1/view?key='+gon.google_api_key+'&center=' + lat + ',' + long + '&zoom=15">'

                innerHtml = '<head><style>' +
                // Header part
                ".holder .card{position: absolute;top: 50px;left: 10px;width: 100%; height: 390px; margin: 30px;}" +
                ".scrollable {max-height: 300px;overflow-y: auto;} #select_cluster{position: absolute;top: 400px;}" + 
                '</style></head>' +
                '<body>' + 
                // Close Button
                '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
                // Google map frame
                '<div class="holder"><iframe id="map_frame"' +
                ' width="450"' +
                ' height="800"' +
                ' style="border:0"' +
                ' loading="lazy"' +
                ' allowfullscreen' +
                src +
                '</iframe>' +
                // Card to display information about district
                '<div class="card" style="width: 18rem;">' +
                '<div class="card-body">' +
                '<h5 class="card-title"> Cluster '+ clicked_id +' in ' + lad_name + '</h5>' +
                '<div class="scrollable">' + 
                '<br><h6 class="card-subtitle mb-2 text-muted"> '+ sum_rest_num +' Restaurant(s) </h6>' +
                '<h6 class="card-subtitle mb-2 text-muted"> '+ curr_rest_num +' Direct Competitors (' + rest_cat_arr[parseInt(rest_cat)] + ') </h6>' +
                '<h6 class="card-subtitle mb-2 text-muted"> '+ (sum_rest_num - curr_rest_num) +' Indirect Competitors </h6>'
                
                cat_tag = {"Italian Restaurant" : "ITA",
                "Indian Restaurant" : "IND",
                "Japanese Restaurant" : "JAP",
                "Thai Restaurant" : "THA",
                "British Restaurant" : "BRIT",
                "Chinese Restaurant" : "CHN",
                "Vegetarian" : "VEG",
                "Cafe" : "Cafe",
                "Pub" : "Pub"};
                
                // Add all places in the cluster into array so pass to controller for next stage meaning one whole cluster
                var place_id_arr = []

                // For all restaurants in cluster
                for (let i = 0; i < (info_arr_full).length; i++){
                    place_id_arr.push(info_arr_full[i]["place_id"]);

                    console.log("Response: " + info_arr_full[i]["ratings"]);

                    innerHtml = innerHtml + '<br><h5 class="card-subtitle mb-2 text-muted"> '+ info_arr_full[i]["name"] +' <span class="badge rounded-pill bg-info text-dark">' + cat_tag[info_arr_full[i]["rest_cat"]] + '</span> </h5>';
                    innerHtml = innerHtml + '<h6 class="card-subtitle mb-2 text-muted"> Rating: '+ info_arr_full[i]["rating"] +' </h6>';
                    if (info_arr_full[i]["price_level"] != null){
                        innerHtml = innerHtml + '<h6 class="card-subtitle mb-2 text-muted"> Price Level: '+ info_arr_full[i]["price_level"] +' </h6>';
                    }
                    innerHtml = innerHtml + '<button type="button" class="btn btn-success" onclick="location.href=' + "'" + "https://www.google.com/maps/search/?api=1&query=" + encodeURI((info_arr_full[i]["rest_cat"]) + " Near " + lad_name) + "&query_place_id=" + info_arr_full[i]["place_id"] + "'" + '" > Learn More </Button><br>';

                } 
                
                innerHtml = innerHtml + '<form class="button_to" method="post" action="/location_in_cluster?&rest_cat='+ gon.rest_cat +'&lad_name='+ gon.lad_name +'&lsoa_code='+ gon.lsoa11_code + '&cluster='+  clicked_id + '&place_id_arr='+  place_id_arr + '">';
                innerHtml = innerHtml + '<input class="btn btn-success" id="select_cluster" type="submit" value="Select Cluster" />';
                innerHtml = innerHtml + '<input type="hidden" name="authenticity_token" value="' + gon.form_token + '" /></form>';
                
                '</div></div></body>'
                

                document.getElementById("mySidebar").innerHTML=innerHtml;
                document.getElementById("mySidebar").style.width = "450px";
                
                console.log("Finished loading")

            },
            error: function() {
                alert('Unavailable to retreive restaurant detailed info at this moment');
            }
            
        });

        
    }

    function clusterButton(button_num) {
        
        var value = $('#dataview').val();

        innerHtml = ""

        // if dataview is selected as Map
        if (value == "none") {
            innerHtml = '<head><style> .cluster_scrollable {max-height: 400px;overflow-y: auto; width: 340px;} #cluster_card{position: absolute;top: 260px;left: 50px;}</style></head>' +
            '<body><div class="card" id="cluster_card" style="width: 21.5; height: 1000;"><div class="card-body"><div class="cluster_scrollable" >';
        }

        // If map style is table
        if (value == "1") {
            // Change styling position of options
            innerHtml = '<head><style> .cluster_scrollable {max-height: 400px;overflow-y: auto; width: 340px;} #cluster_card{position: absolute;margin-top: 210px;left: 50px;}</style></head>' +
        '<body><div class="card" id = "cluster_card" style="width: 21.5; height: 1000;"><div class="card-body"><div class="cluster_scrollable">';
        }
        // else datasheet for XXX
        if (value == "2") {
        }
        

        const rest_cat_arr = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"];
        
        // Recommendation Algorithm for evaluating a cluster

        // Firstly print each cluster as card
        for (let i = 1; i <= button_num; i++) {
            innerHtml = innerHtml + ' <div class="col-sm-4"><div class="card"  style="width: 18rem;"><div class="card-body"><h5 class="card-title">Cluster '+ i;
            //number of stars according to algorithm

            // Algorithm part recommend


            innerHtml = innerHtml + '<br><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="background-color:rgb(130, 50, 29);" class="bi bi-star-fill" viewBox="0 0 16 16"><path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/></svg>';
            if(window["cluster_"+ i +"_curr_rest_num"] == 0){
                innerHtml = innerHtml + '<p class="card-text"> No ' +rest_cat_arr[parseInt(gon.rest_cat)] + ' in this cluster<br>' + window["cluster_"+ i +"_rest_num"] +  ' Restaurant(s) in this cluster</p><button type="button" class="btn btn-outline-primary" onclick="clusterInfo(this.id)" id = "' + i +'"> Cluster ' + i + '</button></div></div><br><br>';
            }else if(window["cluster_"+ i +"_curr_rest_num"] == 1){
                innerHtml = innerHtml + '<p class="card-text">' + window["cluster_"+ i +"_curr_rest_num"] + ' ' +rest_cat_arr[parseInt(gon.rest_cat)] + ' in this cluster<br>' + window["cluster_"+ i +"_rest_num"] +  ' Restaurant(s) in this cluster</p><button type="button" class="btn btn-outline-primary" onclick="clusterInfo(this.id)" id = "' + i +'"> Cluster ' + i + '</button></div></div><br><br>';
            }else{
                innerHtml = innerHtml + '<p class="card-text">' + window["cluster_"+ i +"_curr_rest_num"] + ' ' +rest_cat_arr[parseInt(gon.rest_cat)] + 's in the cluster<br>' + window["cluster_"+ i +"_rest_num"] +  ' Restaurant(s) in this cluster</p><button type="button" class="btn btn-outline-primary" onclick="clusterInfo(this.id)" id = "' + i +'"> Cluster ' + i + '</button></div></div><br><br>';
            }
            
        }

        InnerHtml = innerHtml + '</ul></div></div></div></div></div></body>'
        console.log("Inner HTML:" + InnerHtml);

        document.getElementById("clusterButtons").innerHTML=innerHtml;
        
    }

    function closeNav() {
        document.getElementById("mySidebar").style.width = "0";
    }

    // Option to show sheet cluster
    function applyOptions() {
        console.log("Initializing...");
        var containerDiv = document.getElementById("vizContainer"),
            url = "https://public.tableau.com/views/LSOA_Recommendation_Value/Restaurant_Cluster?:language=en-GB&publish=yes&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                "LSOA11 Code" : gon.lsoa11_code,
                width: window.innerWidth,
                height: window.innerHeight - 100,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    workbook = viz.getWorkbook();
                    getUnderlyingData();
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                    
                }
            };

    initViz(containerDiv, url, options);
    }

    function getUnderlyingData(){
        console.log("Worksheets:" + workbook.getActiveSheet());
        sheet = workbook.getActiveSheet();
        // If the active sheet is not a dashboard, then you can just enter:
        // viz.getWorkbook().getActiveSheet();
        options = {
            maxRows: 0, // Max rows to return. Use 0 to return all rows
            ignoreAliases: false,
            ignoreSelection: true,
            includeAllColumns: false
        };

        sheet.getSummaryDataAsync(options).then(function(t){
            console.log("Retreiving Underlying data");
            table = t;
            var tgt = document.getElementById("dataTarget");
            var result_json = JSON.stringify(table);
            console.log(result_json);
            console.log("written JSON");
        
            largest = 0;

            console.log(table["$0"]["$3"].length);

            //Find largest number of cluster number and generate num of buttons
            for (let i = 0; i < table["$0"]["$3"].length; i++){
                //console.log(parseInt(table["$0"]["$3"][i][0]["value"]));
                if (parseInt(table["$0"]["$3"][i][0]["value"]) > parseInt(largest)){
                    largest = table["$0"]["$3"][i][0]["value"];
                }
            }

            for (let i = 0; i < largest; i++){
                window[("cluster_" + (i+1) + "_rest_num")] = 0;
                console.log("created window cluster: window[" + "cluster_" + (i+1) + "_rest_num" + "]");
                window[("cluster_" + (i+1) + "_curr_rest_num")] = 0;
                console.log("created window cluster: window[" + "cluster_" + (i+1) + "_curr_rest_num" + "]");
            }

            window.table = table;
            console.log(largest);

            const rest_cat_arr = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"];
            

            // ALGORITHM for cluster suggestions
            rest_cat = gon.rest_cat;

            sum_rest_num = 0
            curr_rest_num = 0

            for (let i = 0; i < table["$0"]["$3"].length; i++){

                // index (of restaurant in list) of restaurant in cluster
                cluster_rest_cat = table["$0"]["$3"][i][3]["value"];
                console.log("Rest_cat array val for " + i + ": " + rest_cat + ", " + rest_cat_arr[parseInt(rest_cat)]);
                console.log("Actual rest_cat: " + i + ": " + cluster_rest_cat);

                // total numbers of restaurants of any category
                sum_rest_num = sum_rest_num + 1;
                
                // current type of restaurants amount
                if (rest_cat_arr[parseInt(rest_cat)] == cluster_rest_cat){
                    curr_rest_num = curr_rest_num + 1;
                                // number of total restaurants in one cluster
                    window[("cluster_" + (table["$0"]["$3"][i][0]["value"]) + "_curr_rest_num")] += 1; 
                    console.log("added curr amount: " + curr_rest_num);
                }
                console.log("next stage");
                // calculate restaurant category value for competition
                console.log("Num of current type restaurant: " + curr_rest_num);

                // number of total restaurants in one cluster
                
                window[("cluster_" + table["$0"]["$3"][i][0]["value"] + "_rest_num")] += 1;
                console.log("cluster_" + (table["$0"]["$3"][i][0]["value"]) + "_rest_num")
            }

            console.log("For each cluster, rest num: ");
            console.log(window["cluster_1_rest_num"]);
            console.log(window["cluster_2_rest_num"]);
            console.log(window["cluster_3_rest_num"]);
            console.log(window["cluster_4_rest_num"]);
            console.log(window["cluster_5_rest_num"]);

            console.log("For each cluster, current rest cat num: ");
            console.log(window["cluster_1_curr_rest_num"]);
            console.log(window["cluster_2_curr_rest_num"]);
            console.log(window["cluster_3_curr_rest_num"]);
            console.log(window["cluster_4_curr_rest_num"]);
            console.log(window["cluster_5_curr_rest_num"]);

            // calculate cluster with most restaurants but least similar ones
            for (let i = 0; i < largest; i++){
                window[("cluster_" + (i+1) + "_recommend")] = window[("cluster_" + (table["$0"]["$3"][i][0]["value"]) + "_curr_rest_num")] / window[("cluster_" + (table["$0"]["$3"][i][0]["value"]) + "_rest_num")];
            }

            clusterButton(largest);

            }
            );
    }   

        // Function to listen to adjustment of window
    window.addEventListener("resize", () => {
        console.log(
            `Resizing the window ${window.innerHeight}, ${window.innerWidth}`
        );
        autoResize();
    });

    // Resize dashboard window
    function autoResize(){
        const height = window.innerHeight;
        const width = window.innerWidth;
        viz.setFrameSize(width, height);
    }

    function listenToMarksSelection() {
        console.log("listenToMarksSelection function is loaded");
        

        viz.addEventListener(tableau.TableauEventName.MARKS_SELECTION, onMarksSelection);
    }

    function onMarksSelection(marksEvent) {
        console.log("onMarksSelection function is loaded");
        return marksEvent.getMarksAsync().then(reportSelectedMarks);
    }

    function reportSelectedMarks(marks) {
        console.log(marks)
        console.log("reportSelectedMarks is loaded");
        var html = "";

        for (var markIndex = 0; markIndex < marks.length; markIndex++) {
            var pairs = marks[markIndex].getPairs();
            html += "Mark " + markIndex + ": ";
            var array = [];
            var dict = {};
            for (var pairIndex = 0; pairIndex < pairs.length; pairIndex++) {
                var pair = pairs[pairIndex];
                html += "Field Name: " + pair.fieldName;
                html += ", Value:" + pair.formattedValue + ", ";
                dict[pair.fieldName] = pair.formattedValue;;
                array.push(pair.formattedValue)
            }
            html += "";
            
            for(var key in dict) {
            console.log(key + " : " + dict[key]);
            }
        }
        console.log("Length:" + marks.length);

        var rest_place_id = dict["Place ID (Restaurant Location Output.csv1)"];
        var rest_cat = dict["Restaurant Category (Restaurant Location Output.csv1)"];
        var lat = dict["ATTR(LAT)"];
        var long = dict["ATTR(Long)"];

        // only Google API when one mark is selected
        if (marks.length == 1){
            console.log("Place ID:" + rest_place_id + ", Category: " + rest_cat);
            openNav_Restaurant(rest_place_id,rest_cat, gon.lad_name);
            console.log("Sent to openNav");
        }
    }

%body#stylediv

-# Side panel for google maps
#mySidebar.sidebar
#clusterButtons

    

%br
