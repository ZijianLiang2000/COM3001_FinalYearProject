-# Enable gon to work, so that ENV variables can be passed to js
= include_gon

%h1 Local Authority District Map
%br
-# Filter search bar part
-# %input{:type => "number", :type => "text", :id => "filter_input", :placeholder => "Search Area to Filter", :class => "form-control mb-2"}
-# = button_tag 'Search', class: 'btn btn-success btn-block', id: "applyFilter"

%br
-# include script to add google embed iframe
%script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"}

-# Options to choose which map to display
%h4 Map View:
%select#globalstyleselect{:onchange => "styleselect()"}
    %option{:disabled => "disabled", :hidden => "", :selected => "selected", :value => "none"} Select an Option
    %option{:value => "1"} Heatmap
    %option{:value => "2"} Density map

  
%h4 Restaurant Category:
%select#rest_cat_select{:onchange => "update_weight_to_tableau()"}
    %option{:disabled => "disabled", :hidden => "", :selected => "selected", :value => "none"} Select an Restaurant Category
    %option{:value => "0"} Italian Restaurant
    %option{:value => "1"} Indian Restaurant
    %option{:value => "2"} Japanese Restaurant
    %option{:value => "3"} Thai Restaurant
    %option{:value => "4"} British Restaurant
    %option{:value => "5"} Chinese Restaurant
    %option{:value => "6"} Vegetarian
    %option{:value => "7"} Cafe
    %option{:value => "8"} Pub

%br
%head
%title Basic Embed
%script{:src => "https://public.tableau.com/javascripts/api/tableau-2.min.js", :type => "text/javascript"}

-# Window to pop-up and function to open the sidebar
:javascript
    function openNav(name, code, lat,lng,population,count,rest_cat_val) {
        total = 0
        for(var k in count) {
            console.log("Each:" + count[k]);
            total += count[k]
        }
        console.log("RestCatVal:" + rest_cat_val)
        console.log("RestCatVal (int):" + parseInt(rest_cat_val))
        console.log("Number of selected category restaurants:" + count[parseInt(rest_cat_val)])

        restaurant_Category_Encode = ["Italian Restaurant","Indian Restaurant","Japanese Restaurant","Thai Restaurant","British Restaurant","Chinese Restaurant","Vegetarian","Cafe","Pub"]

        // Google maps API iFrame source - latitude and longitude of clicked LSOA area on map
        src = ' src="https://www.google.com/maps/embed/v1/view?key='+gon.google_api_key+'&center=' + lat + ',' + lng + '&zoom=15">'
        // Let LSOA default map to show be identical to previous map if next stage
        var map_style = $('#globalstyleselect').val();
        console.log(src);
        console.log("Token: " + gon.form_token);
        console.log("Map style: " + map_style);
        
        innerHtml = '<head><style>' +
        // Header part
        ".holder .card{position: absolute;top: 10px;left: 10px;width: 100%;}.holder #nearby_search{position: absolute;top: 250px;left: 110px;}" +
        '.holder #select_area{position: absolute;bottom: 60px; left: 30%;}'+
        '</style></head>' +
        '<body>' + 
        // Close Button
        '<a class="closebtn" href="javascript:void(0)" onclick="closeNav()">&times;</a>' +
        // Google map frame
        '<div class="holder"><iframe id="map_frame"' +
        ' width="450"' +
        ' height="800"' +
        ' style="border:0"' +
        ' loading="lazy"' +
        ' allowfullscreen' +
        src +
        '</iframe>' +
        // Button to select a location, post params of location to controller
        '<form class="button_to" method="post" action="/lsoa_heatmap?name='+name+'&lad='+ code +'&map_style='+ map_style + '&rest_cat='+ parseInt(rest_cat_val) +'">'+
        '<input class="btn btn-success" id="select_area" type="submit" value="Select ' + name + '" />' +
        '<input type="hidden" name="authenticity_token" value="' + gon.form_token + '" />' +       
        '</form>' +
        // Card to display information about district
        '<div class="card" style="width: 18rem;">' +
        '<div class="card-body">' +
        '<h5 class="card-title">'+ name +'</h5>' +
        '<h6 class="card-subtitle mb-2 text-muted">Population: '+ population +'</h6>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="total"> '+ total +' listed restaurants (of supported restaurant categories) </p>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="dir_compt"> '+ count[parseInt(rest_cat_val)] +' Direct Competitors (' + restaurant_Category_Encode[parseInt(rest_cat_val)] + ') </p>' +
        '<h6 class="card-subtitle mb-2 text-muted" id="indir_compt"> '+ (total - count[parseInt(rest_cat_val)]) +' Indirect Competitors </p>' +
        
        // button for nearby search
        '<form class="button_to" method="post" action="/nearby_result?lat='+lat+'&lng='+lng+'">'+
        '<input class="btn btn-primary" id="nearby_search" type="submit" value="Feature Locations nearby" />' +
        '<input type="hidden" name="authenticity_token" value="' + gon.form_token + '" />' +       
        '</form>'
        '</div></div></div></body>'


        document.getElementById("mySidebar").innerHTML=innerHtml;
        document.getElementById("mySidebar").style.width = "450px";
        
    }

    function closeNav() {
        document.getElementById("mySidebar").style.width = "0";
    }

    let viz
    //function for viz
    function initViz(containerDiv, url, options) {
        if (viz){
            viz.dispose();
        }
        viz = new tableau.Viz(containerDiv, url, options);
    }

    // Option to show sheet 1
    function applyOptions1() {
        var containerDiv = document.getElementById("vizContainer"),
            url = "https://public.tableau.com/views/LAD_Recommendation_Value/WorksheetHeatmap?:language=zh-CN&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                // "LSOA11 Name" : ["Canterbury 006A","Burnley 009B"],
                width: window.innerWidth,
                height: window.innerHeight,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                    
                }
            };
    initViz(containerDiv, url, options);
    }

    // Option to show sheet 2 for Heatmap
        function applyOptions2() {
        var containerDiv = document.getElementById("vizContainer"),
            // url = "https://public.tableau.com/views/Population-LSOAHeatMap/Sheet3?:publish=yes&:display_count=n&:origin=viz_share_link"
            url = "https://public.tableau.com/views/LAD_Recommendation_Value/WorksheetDensityMap?:language=zh-CN&:display_count=n&:origin=viz_share_link",
            options = {
                // Options to show area LSOA code for user when at start
                // "LSOA11 Name" : ["Canterbury 006A","Burnley 009B"],
                width: window.innerWidth,
                height: window.innerHeight,
                device: "desktop",
                hideTabs: true,
                onFirstInteractive: function () {
                    console.log("Run this code when the viz has finished loading.");
                    listenToMarksSelection();
                    
                }
            };

    initViz(containerDiv, url, options);
    }

    // apply filter after webpage loaded
    function applyFilter(){
        
        // get the values from input
        const filterInput = document.getElementById('filter_input').value;
        // get workbook obj
        const workbook = viz.getWorkbook();
        // get active sheet in window - which is dashboard
        const activeSheet = workbook.getActiveSheet();
        // define sheet to filter
        const sheetToFilter = activeSheet;
        
        sheetToFilter.applyFilterAsync("Lsoa11Nm",filterInput,tableau.FilterUpdateType.REPLACE);
        console.log(activeSheet);
    }

    // Function to listen to adjustment of window
    window.addEventListener("resize", () => {
        console.log(
            `Resizing the window ${window.innerHeight}, ${window.innerWidth}`
        );
        autoResize();
    });

    // Resize dashboard window
    function autoResize(){
        const height = window.innerHeight;
        const width = window.innerWidth;
        viz.setFrameSize(width, height);
    }

    document.getElementById('applyFilter').addEventListener('click',function(){
        applyFilter();
    })

    function styleselect() {
        var value = $('#globalstyleselect').val();
        var div = $("#stylediv");
        // If map style is Heatmap map
        if (value == "1") {
            // Use data sheet for Heatmap map
            applyOptions1();
        }
        // else you datasheet for Density map
        if (value == "2") {
            applyOptions2();
        }
    }

    // JS scipt to update value when an option is selected for restuarant category
    // because some weights for importance change for different restaurants
    function update_weight_to_tableau(){
        var rest_cat_value = $('#rest_cat_select').val();

        var Weight_Population = 1;
        var Asian_Weight = 1;

        console.log("Selected restaurant category: '" + rest_cat_value + "'")
        // if rest_cat_value = 5 (Chinese Restaurant), then update weights
        if (rest_cat_value == 5){
            Weight_Population = 0.5;
            Asian_Weight = 0.8;
        }
        // etc

        console.log("Weight Population:" + Weight_Population + ", Asian Weight: " + Asian_Weight);

        // get workbook
        const workbook = viz.getWorkbook();
        
        workbook.changeParameterValueAsync("Weight_Population", Weight_Population);
        workbook.changeParameterValueAsync("Asian_weight", Asian_Weight);

    }

    function listenToMarksSelection() {
        console.log("listenToMarksSelection function is loaded");
        update_weight_to_tableau();
        viz.addEventListener(tableau.TableauEventName.MARKS_SELECTION, onMarksSelection);
    }

    function onMarksSelection(marksEvent) {
        console.log("onMarksSelection function is loaded");
        
        return marksEvent.getMarksAsync().then(reportSelectedMarks);
    }

    function reportSelectedMarks(marks) {
        console.log("reportSelectedMarks is loaded");
        var html = "";

        // Obtain mark data when selected
        for (var markIndex = 0; markIndex < marks.length; markIndex++) {
            var pairs = marks[markIndex].getPairs();
            html += "Mark " + markIndex + ": ";
            var array = [];
            for (var pairIndex = 0; pairIndex < pairs.length; pairIndex++) {
                var pair = pairs[pairIndex];
                html += "Field Name: " + pair.fieldName;
                html += ", Value:" + pair.formattedValue + ", ";
                array.push(pair.formattedValue)
            }
            html += "";
            for (var index = 0; index < array.length; index++) {
                console.log(array[index] + " ");
            }
        }
        // Assign mark parameters to values
        var name = array[6];
        var population = array[2];
        var lat = array[8];
        var lng = array[9];
        var code = array[5];

        console.log()

        res_count = new Array();

        // only Google API when one mark is selected
        if (marks.length == 1){
            // Print selected restaurant category value
            var rest_cat_value = $('#rest_cat_select').val();
            console.log("Restaurant Category Selected:" + rest_cat_value)
            // Use AJAX to call method from controller
            $.ajax({
                type: "GET",
                url: "/get_restaurant_count",
                data: {'name': name},
                success:function(msg){
                    // Returning a json format of count
                    res_count = msg.response;
                    console.log("Response: " + res_count)
                    openNav(name,code, lat,lng,population,res_count,rest_cat_value);
                },
                error: function() {
                    alert('Unavailable to retreive restaurant amount in this area');
                }
            });
            
            // openNav(res_count, name,lat,lng,population);
            console.log("LAD Name:" + name + ", LAD Code: " + code +  ", Lat:" + lat + ",lng: " + lng + ", population: " + population);
            
        }
    }

%body#stylediv

-# Side panel for google maps
#mySidebar.sidebar

%br

