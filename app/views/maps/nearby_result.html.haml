-# Star rating system Reference from: https://codepen.io/damianmuti/pen/KmEMdR

= include_gon
%head
    %style    

%body{:onload => "init()"}
    %script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"}
    %script{:src => "http://maps.google.com/maps/api/js?key=#{ENV["GOOGLE_API_KEY"]}", :type => "text/javascript"}
    :javascript
        function init(){

            // Add result category names dynamically to filter
            console.log("loading");
            var selectElement = document.getElementById('categoryselect');
            var results = gon.nearby_places["results"];
            console.log(results);
            // for each read category names
            for (var i = 0; i < Object.keys(results).length; i++) {
                category_name = String(results[i]["categories"][0]["name"]);
                // add to select
                selectElement.add(new Option(category_name));
            }
            const options = []
            document.querySelectorAll('#categoryselect > option').forEach((option) => {
                if (options.includes(option.value)){
                    option.remove();
                    console.log("Removed object")
                } 
                else options.push(option.value)

            })

            // Display stars when page is loaded
            // Look for all stars div with same id when rating is available
            var star_rating = document.querySelectorAll('div[id*="starRating"]');
            for (var index = 0; index < star_rating.length; index++){
                iter_id = star_rating[index].id;
                console.log(index);
                console.log(iter_id);

                //Read actual rating value
                var regex = /[+-]?\d+(\.\d+)?/g;
                var ratingVal = document.getElementById(iter_id).parentNode.querySelector("#ratingVal").innerHTML;
                ratingVal = parseFloat(ratingVal.match(regex).map(function(v) { return parseFloat(v); }));
                console.log(ratingVal);

                // Change it to star-adaptable value, which is every 0.25 scale
                // firstly get the value's int part
                valInt = ~~ratingVal;
                valDec = (ratingVal.toFixed(2) - valInt).toFixed(2);
                console.log("valInt:" + valInt);
                console.log("Before: valDec: " + valDec);
                // scale each value to a read-able scale
                if (valDec > 0 && valDec < 0.25) {
                    valDec = 0.25
                } else if (valDec > 0.25 && valDec < 0.5) {
                    valDec = 0.25
                } else if (valDec > 0.5 && valDec < 0.75) {
                    valDec = 0.75
                } else if (valDec > 0.75) {
                    valDec = 0.75
                } else if (valDec > 0.10) {
                    valDec = 0
                }
                console.log("After: valDec: " + valDec);
                ratingVal = parseFloat(valInt) + parseFloat(valDec)
                console.log("Final Value: "+ratingVal);

                //Replace each element correspondingly to star counts
                document.getElementById(iter_id).innerHTML = '<div class="rating-holder"><div class="c-rating c-rating--big" data-rating-value="'+ ratingVal +'">'+
                '<button>1</button><button>2</button><button>3</button><button>4</button><button>5</button><button>6</button><button>7</button><button>8</button><button>9</button><button>10</button></div></div>';

            }

            plotmap(results);

        }

        // function to return filtered values according to select tag filter
        function returnFilter(){
            // show something according to selected values
            var location_cat_val = $('#categoryselect').val();
            console.log([gon.nearby_places["results"]]);
            original_data = gon.nearby_places["results"];
            filtered_data = [];

            // Check through every restaurant in json
            if (location_cat_val != "All"){
                for (let i = 0; i < original_data.length; i++) {
                // If selected option All add everything in
                var filterBy = {
                    name: [location_cat_val]
                };

                var result = original_data[i].categories.filter(function (o) {
                    if(o.name === filterBy.name[0]){
                        console.log("Found:" + (i));
                        filtered_data.push(original_data[i]);
                    }
                    return i;
                });
            }
            // Check every category layer for each restaurant and see if any chosen one fits
            } else {
                for (let i = 0; i < original_data.length; i++) {
                    filtered_data.push(original_data[i]);
                }
            }
            console.log(filtered_data);
            return filtered_data;
        }

        // function to return filtered values according to select tag sort
        function returnSort(filtered_data){
            // show something according to selected values

            var sortVal = $('#sortselect').val();
            console.log(filtered_data[0]);

            var sortseqVal = $('#sortseq_select').val();
            // Sort each index
            sorted_index_dict = {};
            // Then append value into array
            sorted_data = [];

            // function to sort a dictionary, reference from: https://stackoverflow.com/questions/25500316/sort-a-dictionary-by-value-in-javascript
            function sortJsObject(dict, perc_change) {
                // perc_change is increase or decrease
                // Create items array
                var items = Object.keys(dict).map(function(key) {
                    return [key, dict[key]];
                });

                // Sort the array based on the second element

                items.sort(function(first, second) {
                    if(perc_change == "Ascending"){
                        result = first[1] - second[1];
                    } else if (perc_change == "Descending"){
                        result = second[1] - first[1];
                    } else {
                        result = second[1] - first[1];
                    }
                    return result;
                });

                return items
            }

            // Check through every restaurant in json
            if (sortVal == "Distance"){
                console.log("Clicked Distance");
                for (let i = 0; i < filtered_data.length; i++) {
                    // Add distance of element of index i to dictionary and sort its value
                    if(filtered_data[i]["distance"] != null){
                        sorted_index_dict[i] = filtered_data[i]["distance"];
                        console.log(filtered_data[i]["distance"]);
                    }
                }

                console.log(JSON.stringify(sorted_index_dict));

                console.log("Sorting!");

                var sorted_dict = sortJsObject(sorted_index_dict,sortseqVal);

                console.log(sorted_dict);

            }
            // Check every category layer for each restaurant and see if any chosen one fits
             else if (sortVal == "Rating"){
                 console.log("Clicked Rating");
                for (let i = 0; i < filtered_data.length; i++) {
                    if(filtered_data[i]["rating"] != null){
                        sorted_index_dict[i] = filtered_data[i]["rating"];
                        console.log(filtered_data[i]["rating"]);
                    }
                }
                console.log(JSON.stringify(sorted_index_dict));

                console.log("Sorting!");

                var sorted_dict = sortJsObject(sorted_index_dict,sortseqVal);

                console.log(sorted_dict);

            } else if (sortVal == "Popularity"){
                console.log("Clicked Popularity");
                for (let i = 0; i < filtered_data.length; i++) {
                    if(filtered_data[i]["popularity"] != null){
                        sorted_index_dict[i] = filtered_data[i]["popularity"];
                        console.log(filtered_data[i]["popularity"]);
                    }
                    console.log(filtered_data[i]["popularity"]);
                }
                console.log(JSON.stringify(sorted_index_dict));

                console.log("Sorting!");

                var sorted_dict = sortJsObject(sorted_index_dict,sortseqVal);

                console.log(sorted_dict);
                
            }
             else if (sortVal == "Price"){
                console.log("Clicked Price");
                for (let i = 0; i < filtered_data.length; i++) {
                    if(filtered_data[i]["price"] != null){
                        sorted_index_dict[i] = filtered_data[i]["price"];
                        console.log(filtered_data[i]["price"]);
                    }
                    console.log(filtered_data[i]["price"]);
                }
                console.log(JSON.stringify(sorted_index_dict));

                console.log("Sorting!");

                var sorted_dict = sortJsObject(sorted_index_dict,sortseqVal);
                
                console.log(sorted_dict);
            }
            // dict value sorted either ascending or descending, get the keys (index) and save it in arr
            for (let i = 0; i < sorted_dict.length; i++) { 
                var sorted_index = sorted_dict[i][0];
                console.log(sorted_dict[i][0]);
                sorted_data.push(filtered_data[sorted_index]);
            }

            console.log(sorted_data);
            return sorted_data;
        }

        function generateInnerHTML(){

            // Create a Price level dictionary
            `
            - 1 = Cheap
            - 2 = Moderate
            - 3 = Expensive
            - 4 = Very Expensive.
            `

            var priceLvl = {1 :"Cheap", 2 :"Moderate", 3 :"Expensive", 4 : "Very Expensive"};

            // change inner html according to filter array objects
            innerHtml = '<style> .card-img-top {width: 100%;height: 15vw;object-fit: cover;} </style><div class="container"><div class="row mt-4">';
            for (let i = 0; i < filtered_data.length; i++) {
                innerHtml += '<div class="col-sm-3 mb-4">';
                innerHtml += '    <div class="card h-100" style="width: 18rem;  position: relative; top: 50px;">';
                    if (filtered_data[i]["photos"][0] == null){
                        innerHtml += '<img alt="Restaurant image" class="card-img-top w-auto" src="https://img.freepik.com/free-vector/stylish-hexagonal-line-pattern-background_1017-19742.jpg?w=1800&t=st=1651250824~exp=1651251424~hmac=3f2bd303f1048ad7eb4c54fe74bbc7e3cbd8cc4bbc56c94dfb44eb5a51ccda81"/>';
                        innerHtml += '<div class="text-block" style="position: absolute; top: 10%;left: 0px;background-color: black;color: white;padding-left: 20px;padding-right: 20px;opacity: 0.7;"><br><h5>'+filtered_data[i]["name"]+'</h5><p>'+filtered_data[i]["categories"][0]["name"]+'</p><br></div>'
                    } else {
                        console.log(filtered_data[i]["photos"][0]["prefix"] + "original" + filtered_data[i]["photos"][0]["suffix"]);
                        innerHtml += '<img alt="Restaurant image" class="card-img-top w-auto" src="'+ filtered_data[i]["photos"][0]["prefix"] + 'original' + filtered_data[i]["photos"][0]["suffix"] + '"/>';
                    }
                innerHtml += '    <div class="card-body">';
                innerHtml += '        <h5 class="card-title"><b>'+filtered_data[i]["name"]+'</b></h5>';
                if (filtered_data[i]["rating"] != null){
                    innerHtml += '    <h6 class="card-text">Ratings: '+filtered_data[i]["rating"]+' Stars</h6>';
                }
                innerHtml += '    <h6>Distance: '+ filtered_data[i]["distance"] +' (m)</h6>';
                if (filtered_data[i]["price"] != null){
                    innerHtml += '<h6>Price: '+ priceLvl[filtered_data[i]["price"]]+'</h6>'
                }
                if (filtered_data[i]["popularity"] != null){
                    innerHtml += '<h6>Popularity: '+ filtered_data[i]["popularity"]+'</h6>'
                }
                innerHtml += '<p>Address: '+ filtered_data[i]["location"]["formatted_address"]+'</p>'
                for (let j = 0; j < filtered_data[i]["categories"].length; j++) {
                    innerHtml += '<span class="badge bg-success">'+ filtered_data[i]["categories"][j]["name"] +'</span> '
                }
                innerHtml += '<br><br><a class="btn btn-primary" href="'+ 'https://maps.google.com/?q='+ encodeURIComponent(filtered_data[i]["name"] +','+ filtered_data[i]["location"]["formatted_address"]) +'" style="color:#FFF;">Discover</a></div>';
                innerHtml += '</div>';
                innerHtml += '</div>';
            };

            innerHtml += '</div></div>';
        }

        function plotmap(filtered_data){

            var locations = [];
            for (let i = 0; i < filtered_data.length; i++) {
                try{
                    var name = filtered_data[i]["name"];
                    var lat = filtered_data[i]["geocodes"]["main"]["latitude"];
                    var long = filtered_data[i]["geocodes"]["main"]["longitude"];
                    var category = filtered_data[i]["categories"][0]["name"];
                    var popularity = filtered_data[i]["popularity"];
                    var distance = filtered_data[i]["distance"];
                    console.log("\n");
                    console.log("Plotting map");
                    console.log(name);
                    console.log(lat);
                    console.log(long);

                    locations.push([String(name), parseFloat(lat), parseFloat(long), parseInt(i+1), String(category), String(popularity), String(distance)]);
                }catch{
                    console.log("Lat and long does not exist for this location");
                }
            }

            var point_index = locations[locations.length-1][3];
            console.log("Point Index:");
            console.log(point_index);

            // Add selected position data on map
            locations.push([null, parseFloat(gon.place_lat), parseFloat(gon.place_lng), point_index+1, "Current Location", null]);
            console.log(locations);

            // Reference from: https://stackoverflow.com/questions/3059044/google-maps-js-api-v3-simple-multiple-marker-example         
            var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 9,
            center: new google.maps.LatLng(locations[0][1], locations[0][2]),
            mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            
            var infowindow = new google.maps.InfoWindow();

            var marker, i;
            
            // Put locations with lat and long results on google map
            for (i = 0; i < locations.length-1; i++) {  
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    map: map,
            });

            // Single marker for location selected
            location_marker = new google.maps.Marker({
                // Put the last point added in locations arr
                    position: new google.maps.LatLng(locations[locations.length-1][1], locations[locations.length-1][2]),
                    map: map,
                    icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'
                    });

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                infowindow.setContent("<b>"+String(locations[i][0]) + "</b><br>Category: " + String(locations[i][4]) + "<br>Popularity: " + String(locations[i][5])+ "<br>Distance: " + String(locations[i][6])+"(m)");
                infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(location_marker, 'click', (function(location_marker, i) {
                return function() {
                infowindow.setContent("<b>"+String(locations[locations.length-1][4])+"</b>");
                infowindow.open(map, location_marker);
                }
            })(location_marker, i));
            }
        
        
        }

        function categoryselect(){

            // First filter then sort
            // Filter
            filtered_data = returnFilter();
            filtered_data = returnSort(filtered_data);
            generateInnerHTML();
            plotmap(filtered_data);

            document.getElementById("myHtml").innerHTML=innerHtml;

        }

        function sortselect(){
            
            // Firstly filter data
            filtered_data = returnFilter();
            // Then sort
            filtered_data = returnSort(filtered_data);
            generateInnerHTML();
            plotmap(filtered_data);
            console.log("Done");

            document.getElementById("myHtml").innerHTML=innerHtml;

        }

    .parent
        .child-float-left-child{:style => "float: left; width: 20%;"}
            %div#lad_option{ :style => "position: relative; margin: auto; top: 10px;left: 40px;" }
                .card{:style => "width: 25rem;"}
                    .card-body
                        -# Options to choose which map to display, first filter or apply all, then sort, so everytime onchange apply filter first, then sort
                        %h4 Places Filter
                        %select#categoryselect{:onchange => "categoryselect()", :class => "form-select w-100%" }
                            %option{:value => "All", :selected => "selected"} All
            
                %br
                .card{:style => "width: 25rem;"}
                    .card-body
                        .parent
                            %h4 Sort by option
                            .child-float-left-child{:style => "float: left;"}
                                //For sorting, first filter or apply all, then sort, so everytime onchange apply filter first, then sort
                                %select#sortselect{:onchange => "sortselect()", :class => "form-select", :style => "width: 215px;" }
                                    %option{:value => "Distance", :selected => "selected"} Distance
                                    %option{:value => "Popularity"} Popularity
                                    %option{:value => "Rating"} Rating
                                    %option{:value => "Price"} Price
                            .child-float-left-child{:style => "float: left; margin-left: 10px;"}
                                %select#sortseq_select{:onchange => "sortselect()", :class => "form-select", :style => "width: 140px;" }
                                    %option{:value => "Ascending", :selected => "selected"} Ascending
                                    %option{:value => "Descending"} Descending
                        %br   
                        %br         
                        -# Button to Previous step
                        = back_link
        .child-float-left-child{:style => "float: left; width: 80%; padding-top: 10px; padding-left: 10%;"}
            #map{:style => "width: 1000px; height: 288.7px; position: relavant;"}


    #myHtml.myHtml
        .container
            .row.mt-4
                - @nearby_results["results"].each_with_index do |restaurant, index|
                    .col-sm-3.mb-4
                        .card.h-100{:style => "width: 18rem; position: relative; top: 50px;"}
                            - if  restaurant["photos"][0] == nil
                                %img.card-img-top{:alt => "Restaurant image", :src => "https://img.freepik.com/free-vector/stylish-hexagonal-line-pattern-background_1017-19742.jpg?w=1800&t=st=1651250824~exp=1651251424~hmac=3f2bd303f1048ad7eb4c54fe74bbc7e3cbd8cc4bbc56c94dfb44eb5a51ccda81", :style => "width: 100%;height: 15vw;object-fit: cover;"}/
                                .text-block{:style => "position: absolute; top: 10%;left: 0px;background-color: black;color: white;padding-left: 20px;padding-right: 20px;opacity: 0.7;"}
                                    %br
                                    %h5 #{restaurant["name"]}
                                    %p #{restaurant["categories"][0]["name"]}
                                    %br
                            - else
                                %img.card-img-top{:alt => "Restaurant image", :src => (restaurant["photos"][0]["prefix"] + "original" + restaurant["photos"][0]["suffix"] ), :style => "width: 100%;height: 15vw;object-fit: cover;"}
                            .card-body
                                %h5.card-title 
                                    %b #{restaurant["name"]}
                                - if  restaurant["rating"] != nil
                                    .starRating{:id => "starRating_#{index}"}
                                    %h6#ratingVal Ratings: #{restaurant["rating"]} Stars
                                %h6 Distance: #{restaurant["distance"]} (m)
                                - if  restaurant["price"] == 1
                                    %h6 Price: Cheap
                                - if restaurant["price"] == 2
                                    %h6 Price: Moderate
                                - if restaurant["price"] == 3
                                    %h6 Price: Expensive
                                - if restaurant["price"] == 4
                                    %h6 Price: Very Expensive

                                - if  restaurant["popularity"] != nil
                                    %h6 Popularity: #{restaurant["popularity"]}
                                %p.card-text
                                    %br
                                    Address: 
                                    = restaurant["location"]["formatted_address"]
                                - restaurant["categories"].each do |type|
                                    %span.badge.bg-success #{(type["name"].to_s)}
                                %br
                                %br
                                %a.btn.btn-primary{:href => URI.encode("https://maps.google.com/?q=#{restaurant["name"]},#{restaurant["location"]["formatted_address"]}"), :style => "color:#FFF;"} Discover