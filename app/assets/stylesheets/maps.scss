// Place all the styles related to the maps controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: https://sass-lang.com/
body {
    font-family: "Lato", sans-serif;
  }
  
  .sidebar {
    height: 100%;
    width: 0;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #111;
    overflow-x: hidden;
    transition: 0.5s;
  }
  
  .sidebar a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: #818181;
    display: block;
    transition: 0.3s;
  }
  
  .sidebar a:hover {
    color: #f1f1f1;
  }
  
  #nearby_search{
    margin: 0;
    position: absolute;
    left: 50%;  .sidebar .closebtn {
      position: absolute;
      top: 0;
      right: 25px;
      font-size: 36px;
      margin-left: 50px;
      color: red;
    }
    top:80%;
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }

  .sidebar .closebtn {
    position: absolute;
    top: 0;
    right: 25px;
    font-size: 36px;
    margin-left: 50px;
    color: rgb(0, 0, 0);
  }
  
  .sidebar .closebtn:hover {
    color: rgb(123, 123, 123);
  }

  /* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size) */
    @media screen and (max-height: 450px) {
    .sidebar {padding-top: 15px;}
    .sidebar a {font-size: 18px;}
  }

  #map {
    height: 100%;
  }
  
  /* Optional: Makes the sample page fill the window. */
  html,
  body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  // Reference: https://codepen.io/damianmuti/pen/KmEMdR
    ////
  /// Star Rating
  /// @group components
  /// @author Dami√°n Muti
  ////

  @import url('https://fonts.googleapis.com/css?family=Roboto+Slab:400');

  ///
  $rating-min-value: 0 !default;
  ///
  $rating-max-value: 10 !default;
  ///
  $rating-steps-value: .25 !default;
  ///
  $rating-color-empty: '%23ddd' !default;
  ///
  $rating-color-full: gold !default;
  ///
  $rating-color-hover: grey !default;
  /// This variable is a map containing the "d" attribute of each of the SVG icons
  $rating-icons-paths: (
    quarter: 'M196.208 415.2v-224.8l-139.504 20.272 100.944 98.384-23.84 138.928z',
    half: 'M258.672 64l-62.384 126.4-139.504 20.272 100.944 98.384-23.84 138.928 124.768-65.6v-318.4z',
    three-quarters: 'M321.616 190.496l-0.656-0.096-62.384-126.4-62.384 126.4-139.504 20.272 100.944 98.384-23.84 138.928 124.768-65.6 63.024 33.136z',
    full: 'M457.888 210.672l-139.504-20.272-62.384-126.4-62.384 126.4-139.504 20.272 100.944 98.384-23.84 138.928 124.768-65.6 124.768 65.6-23.84-138.928c0 0 100.944-98.384 100.944-98.384z'
  );

  /// Creates a dynamic list of values that increment each .25 from 0 to 5
  /// @return {list} 
  @function rating-values() {
    $rating-values: ();

    @for $i from $rating-min-value through ($rating-max-value / $rating-steps-value) {
      $rating-value: abs($i * $rating-steps-value);
      $rating-values: append($rating-values, $rating-value, 'comma');
    }

    @return $rating-values;
  }

  /// Generates an SVG with a given fill color depending on the type of icon passed as parameter. The SVG string is scaped for cross-browser support.
  /// @param {string} $icon - Type of icon. Accepted values: `quarter`, `half`, `three-quarters` or `full`.
  /// @param {color} $color - Passes the fill color of the SVG icon that is being generated. Note: Hexa color values must be escaped for cross-browser support.
  /// @return {string} background value.
  @function get-icon($icon, $color) {
    @if not index(quarter half three-quarters full, $icon) {
      @error "Interaction type must be either `quarter`, `half`, `three-quarters` or `full`.";
    }

    @return url('data:image/svg+xml;utf8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22512%22%20height%3D%22512%22%20viewBox%3D%220%200%20512%20512%22%3E%3Cpath%20fill%3D%22' + $color + '%22%20d%3D%22' + map-get($rating-icons-paths, $icon) + '%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E') center / cover no-repeat;
  }

  /// This is a CSS-only star rating component that shows the proper rating depending on a data-attribute value. JS logic behind this component should round up values per quarter.
  /// @param {number} $star-size [20px] - Provides width and height for each of the stars.
  /// @param {string} $rating-element [button] - Element to use for each of the stars.
  /// @param {string} $interaction-type [representative] - Indicates whether this component should be clickable or representative. Accepted values: `clickable` or `representative`.
  /// @example scss
  ///   .class {
  ///     c-rating(toem(20px), button, clickable);
  ///   }
  /// @example markup
  ///   <div class="c-rating" data-rating-value="3.25">
  ///     <span>1</span>
  ///     <span>2</span>
  ///     <span>3</span>
  ///     <span>4</span>
  ///     <span>5</span>
  ///   </div>
  @mixin c-rating($star-size: 20px, $star-element: button, $interaction-type: representative) {
    @if not index(clickable representative, $interaction-type) {
      @error "Interaction type must be either `clickable` or `representative`.";
    }
    
    #{$star-element} {
      display: inline-block;
      float: left;
      width: $star-size;
      height: $star-size;
      border: 0;
      text-indent: -9999px;
      outline: none;
      background: get-icon(full, $rating-color-empty);

      @if $interaction-type == clickable {
        cursor: pointer;
        transition: background 0.25s ease;
        
        // Override background images on hover state
        &:hover,
        &:hover ~ #{$star-element} {
          background: get-icon(full, $rating-color-empty) !important;
        }
      }
    }
    
    // Override background images on hover state
    @if $interaction-type == clickable {
      &:hover {
        #{$star-element} {
          background: get-icon(full, $rating-color-hover) !important;
        }
      }
    }

    @each $rating-value in rating-values() {
      // Get the next higher integer.
      $rating-value-ceil: ceil($rating-value);

      &[data-rating-value="#{$rating-value}"] {
        #{$star-element}:nth-child(-n+#{$rating-value-ceil}) {
          background: get-icon(full, $rating-color-full);
        }

        #{$star-element}:nth-child(#{$rating-value-ceil}) {
          // Evaluate which fraction of a star this value is and add the proper background
          @if str-slice("#{$rating-value}", 2, 4) == '.25' {
            background: get-icon(quarter, $rating-color-full), get-icon(full, $rating-color-empty)
          }
          @else if str-slice("#{$rating-value}", 2, 4) == '.5' {
            background: get-icon(half, $rating-color-full), get-icon(full, $rating-color-empty)
          }
          @else if str-slice("#{$rating-value}", 2, 4) == '.75' {
            background: get-icon(three-quarters, $rating-color-full), get-icon(full, $rating-color-empty)
          }
        }
      }
    }
  }

  /*
  * General styles.
  * Not necessary for the component to work
  */

  /// Convert to EMs function
  /// @param {number} target - The value to be converted
  /// @param {number} context [$msuxf-font-size] The base font size
  /// @return {em} value
  @function toem($target, $context: 16px) {
    @if $target == 0 {
      @return 0
    }

    @return $target / $context+0em;
  }

  body {
    background: -webkit-gradient(linear, left top, left bottom, from(#de6262), to(#ffb88c)) fixed;
    font-family: 'Roboto Slab', serif;
    text-align: center;
  }

  .wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 700px;
    transform: translate(-50%, -50%);
    
    h1 {
      margin-bottom: 75px;
      font-size: 56px;
      font-weight: 400;
      color: #fff;
    }
  }

  .rating-holder {
    display: inline-block;
    padding: toem(10px) toem(30px);
    margin: 0 10px;
    background-color: #fff;
    border-radius: toem(25px);
    box-sizing: border-box;
  }

  .c-rating {
    @include c-rating(toem(10px), button, representative);
    
    &--small {
      font-size: 50%
    }
    
    &--big {
      font-size: 150%;
    }
  }